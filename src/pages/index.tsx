import { type NextPage } from "next";
import Head from "next/head";
import Link from "next/link";
import { useSession } from "next-auth/react";

import { api } from "@/utils/api";
import { Header } from "@/components/Header";
import { Loader } from "@/components/Loader";
import { Keyboard } from "@/components/Keyboard";
import { useState } from "react";
import type { Note, Topic } from "@prisma/client";
import { type CreateNote, NoteEditor } from "@/components/NoteEditor";
import { WordCard, WordCardList } from "@/components/WordCard";
import { MotionWordCards } from "@/components/MotionWordCards";


const Home: NextPage = () => {
  return (
    <>
      <Head>
        <title>Notaker</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <div className="toast-end toast toast-bottom">
        <div className="alert alert-success">
          <div>
            <span>Message sent successfully.</span>
          </div>
        </div>
      </div>

      

      <Header />
      <Content />
    </>
  );
};

export default Home;

export const Content: React.FC = () => {
  const { data: sessionData } = useSession();

  const [selectedTopic, setSelectedTopic] = useState<Topic | null>(null);

  const {
    data: topics,
    refetch: refetchTopics,
    isLoading,
    isRefetching,
    isFetched
  } = api.topic.getAll.useQuery(undefined, {
    enabled: !!sessionData?.user,
    refetchOnWindowFocus: false,
    onSuccess: (data) => {
      setSelectedTopic(selectedTopic ?? data[0] ?? null);
    },
  });

  const { data: notes } = api.note.getAll.useQuery(
    {
      topicId: selectedTopic?.id ?? "",
    },
    {
      enabled: !!sessionData?.user && !!selectedTopic?.id,
    }
  );

  const createTopic = api.topic.create.useMutation({
    onSuccess: () => {
      void refetchTopics();
    },
  });

  const words = [
    {
      id: "1",
      word: "hello",
      meaning: "czesc",
      completed: false,
    },
    {
      id: "2",
      word: "bye",
      meaning: "do widzenia",
      completed: false,
    },
    {
      id: "3",
      word: "good",
      meaning: "dobry",
      completed: false,
    },
    {
      id: "4",
      word: "bad",
      meaning: "zly",
      completed: false,
    },
    {
      id: "5",
      word: "yes",
      meaning: "tak",
      completed: false,
    },
    {
      id: "6",
      word: "no",
      meaning: "nie",
      completed: false,
    },
  ];

  return (
    <main className="mx-5 mt-5 ">
      {/* <div>
        <ul className="menu rounded-box w-56 bg-base-100 p-2">
          {topics?.map((topic) => (
            <li key={topic.id}>
              <a
                href="#"
                onClick={(evt) => {
                  evt.preventDefault();
                  setSelectedTopic(topic);
                }}
              >
                {topic.title}
              </a>
            </li>
          ))}
        </ul>
        {(isLoading || isRefetching) && <Loader />}
        <div className="divider" />

        <input
          type="text"
          className="input-bordered input-secondary input w-full max-w-xs"
          placeholder="New topic..."
          onKeyDown={(e) => {
            if (e.key === "Enter") {
              createTopic.mutate({ title: e.currentTarget.value });
              e.currentTarget.value = "";
            }
          }}
        />
      </div> */}
      <div className="">
        {/* {selectedTopic && (
          <NoteEditor
            onSave={(note: CreateNote) => {
              console.log("hello", note);
            }}
          />
        )} */}
        {/* <WordCardList words={words} /> */}

        <MotionWordCards words={words} />
      </div>
    </main>
  );
};


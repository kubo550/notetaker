import { type NextPage } from "next";
import Head from "next/head";
import { useSession } from "next-auth/react";

import { api } from "@/utils/api";
import { Header } from "@/components/Header";
import { useState } from "react";
import type { Topic } from "@prisma/client";
import { MotionWordCards } from "@/components/MotionWordCards";
import { WordsProvider } from "@/context/WordsContext";
import { Footer } from "@/components/Footer";

const Home: NextPage = () => {
  return (
    <>
      <Head>
        <title>Translate Speedrun</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>




      <div className="flex flex-col min-h-screen">

        <Header />
        <Content />
        <Footer />
      </div>

    </>
  );
};

export default Home;

export const Content: React.FC = () => {
  const { data: sessionData } = useSession();

  const [selectedTopic, setSelectedTopic] = useState<Topic | null>(null);

  const {
    data: topics,
    refetch: refetchTopics,
    isLoading,
    isRefetching,
    isFetched
  } = api.topic.getAll.useQuery(undefined, {
    enabled: !!sessionData?.user,
    refetchOnWindowFocus: false,
    onSuccess: (data) => {
      // setSelectedTopic(selectedTopic ?? data[0] ?? null);
    }
  });

  const { data: notes } = api.note.getAll.useQuery(
    {
      topicId: selectedTopic?.id ?? ""
    },
    {
      enabled: !!sessionData?.user && !!selectedTopic?.id
    }
  );

  const createTopic = api.topic.create.useMutation({
    onSuccess: () => {
      void refetchTopics();
    }
  });

  return (
    <WordsProvider>
      <main className="mx-5 mt-5 grid gap-2  flex-1">
        {/*<div className="col-span-3">*/}
        {/*  <ul className="menu rounded-box w-56 bg-base-100 p-2">*/}
        {/*    {topics?.map((topic) => (*/}
        {/*      <li key={topic.id}>*/}
        {/*        <a*/}
        {/*          href="#"*/}
        {/*          onClick={(evt) => {*/}
        {/*            evt.preventDefault();*/}
        {/*            setSelectedTopic(topic);*/}
        {/*          }}*/}
        {/*        >*/}
        {/*          {topic.title}*/}
        {/*        </a>*/}
        {/*      </li>*/}
        {/*    ))}*/}
        {/*  </ul>*/}
        {/*  /!*{(isLoading || isRefetching) && <Loader />}*!/*/}

        {/*  /!* <input*/}
        {/*  type="text"*/}
        {/*  className="input-bordered input-secondary input w-full max-w-xs"*/}
        {/*  placeholder="New topic..."*/}
        {/*  onKeyDown={(e) => {*/}
        {/*    if (e.key === "Enter") {*/}
        {/*      createTopic.mutate({ title: e.currentTarget.value });*/}
        {/*      e.currentTarget.value = "";*/}
        {/*    }*/}
        {/*  }}*/}
        {/*/> *!/*/}
        {/*</div>*/}
          {/* {selectedTopic && (
          <NoteEditor
            onSave={(note: CreateNote) => {
              console.log("hello", note);
            }}
          />
        )} */}
          {/* <WordCardList words={words} /> */}

          <MotionWordCards wps={50} />
      </main>
    </WordsProvider>
  );
};
